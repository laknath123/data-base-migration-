test2 <- data.frame(df.list[10])
View(test2)
df.list <- lapply(ans_everything, function(d) {
d<- d%>%select(c(-1))
d<- d[-1:-2,]
d[2:9] <- lapply(d[2:9],as.numeric) # making column specific columns to be integer
#d[14:16] <- lapply(d[14:16],as.numeric) # making column specific columns to be integer
#d[3:9]<- d[3:9]*100
#d[14:16]<- d[14:16]*100
return(d)})
test<- data.frame(ans_everything[10])
test2 <- data.frame(df.list[10])
View(test)
View(test2)
View(test2)
df.list <- lapply(ans_everything, function(d) {
d<- d%>%select(c(-1))
d<- d[-1:-2,]
d[2:9] <- lapply(d[2:9],as.numeric) # making column specific columns to be integer
d[3:9]<- d[3:9]*100
#d[14:16]<- d[14:16]*100
return(d)})
test<- data.frame(ans_everything[10])
test2 <- data.frame(df.list[10])
View(test2)
interestrates_df.list<- FUN_metainfo_combine(sheetname = "Sch 2 Interest Rates",skipnumber=9)
#Loading the library's
source("library.R")
filenames <- list.files(here("datafiles"), full.names = TRUE, recursive = TRUE)
# Extracting out parameters from the files names to be later added into the datasets
sites <- str_extract(filenames[23:139], "BP|PIB|PCB|APCB|BOH|BOG")  # same length as filenames
years <- str_extract(filenames[23:139], "\\d{4}")  # extracting the years from the files
quarters <- str_extract(filenames[23:139], "\\d{1}+(?= Prudential|_)")  # extracting the quarter from the files
#function for combining file meta information with file created#Obtaining the File information
FUN_metainfo_combine <- function(fileskip=23:139,sheetname,skipnumber){
stopifnot(length(filenames[fileskip])==length(sites))  # returns error if not the same length
ans <- map2(filenames[fileskip], sites, ~read_excel(.x,sheetname,skip=skipnumber) %>% mutate(id = .y))  # .x is element in filenames, and .y is element in sites
#adding year as a column
ans_withyear<- Map(cbind, ans, year = years)
#Adding the quarter as a column
ans_everything<- Map(cbind, ans_withyear, quarter = quarters)
return(ans_everything)
}
interestrates_df.list<- FUN_metainfo_combine(sheetname = "Sch 2 Interest Rates",skipnumber=9)
#Loading the library's
source("library.R")
filenames <- list.files(here("datafiles"), full.names = TRUE, recursive = TRUE)
# Extracting out parameters from the files names to be later added into the datasets
sites <- str_extract(filenames[23:139], "BP|PIB|PCB|APCB|BOH|BOG")  # same length as filenames
years <- str_extract(filenames[23:139], "\\d{4}")  # extracting the years from the files
quarters <- str_extract(filenames[23:139], "\\d{1}+(?= Prudential|_)")  # extracting the quarter from the files
#function for combining file meta information with file created#Obtaining the File information
FUN_metainfo_combine <- function(fileskip=23:139,sheetname,skipnumber){
stopifnot(length(filenames[fileskip])==length(sites))  # returns error if not the same length
ans <- map2(filenames[fileskip], sites, ~read_excel(.x,sheetname,skip=skipnumber) %>% mutate(id = .y))  # .x is element in filenames, and .y is element in sites
#adding year as a column
ans_withyear<- Map(cbind, ans, year = years)
#Adding the quarter as a column
ans_everything<- Map(cbind, ans_withyear, quarter = quarters)
return(ans_everything)
}
#Balance Sheet
bs_df.list<- FUN_metainfo_combine(sheetname = "Form 1 Bal Sheet",skipnumber=8)
#Cleaning up each excel file by removing columns,using row names as columns, changing column datatypes
df.list <- lapply(bs_df.list, function(x) {
x <- x%>%select(c(-1,-6))         # Selecting specific columns
x<- x[-1:-2,]
x[2:4] <- lapply(x[2:4],as.integer) # making column specific columns to be integer
x <- x[!apply(is.na(x[,2:4]), 1, all),] # removing NA values from specific columns
return(x)})
listtotake<- df.list[sapply(df.list, ncol)==7]
balance_sheetmigrate<- do.call("rbind", listtotake)
fwrite(balance_sheetmigrate,"outputs/balancesheet.csv",col.names = FALSE)
#Interest Rates
interestrates_df.list<- FUN_metainfo_combine(sheetname = "Sch 2 Interest Rates",skipnumber=9)
df.list <- lapply(ans_everything, function(d) {
d<- d%>%select(c(-1))
d<- d[-1:-2,]
d[2:9] <- lapply(d[2:9],as.numeric) # making column specific columns to be integer
d[3:9]<- d[3:9]*100
#d[14:16]<- d[14:16]*100
return(d)})
interestrates_sheetmigrate<- do.call("rbind", df.list)
fwrite(balance_sheetmigrate,"outputs/interestrate.csv",col.names = FALSE)
#Loading the library's
source("library.R")
filenames <- list.files(here("datafiles"), full.names = TRUE, recursive = TRUE)
# Extracting out parameters from the files names to be later added into the datasets
sites <- str_extract(filenames[23:139], "BP|PIB|PCB|APCB|BOH|BOG")  # same length as filenames
years <- str_extract(filenames[23:139], "\\d{4}")  # extracting the years from the files
quarters <- str_extract(filenames[23:139], "\\d{1}+(?= Prudential|_)")  # extracting the quarter from the files
#function for combining file meta information with file created#Obtaining the File information
FUN_metainfo_combine <- function(fileskip=23:139,sheetname,skipnumber){
stopifnot(length(filenames[fileskip])==length(sites))  # returns error if not the same length
ans <- map2(filenames[fileskip], sites, ~read_excel(.x,sheetname,skip=skipnumber) %>% mutate(id = .y))  # .x is element in filenames, and .y is element in sites
#adding year as a column
ans_withyear<- Map(cbind, ans, year = years)
#Adding the quarter as a column
ans_everything<- Map(cbind, ans_withyear, quarter = quarters)
return(ans_everything)
}
#Balance Sheet
bs_df.list<- FUN_metainfo_combine(sheetname = "Form 1 Bal Sheet",skipnumber=8)
#Cleaning up each excel file by removing columns,using row names as columns, changing column datatypes
df.list <- lapply(bs_df.list, function(x) {
x <- x%>%select(c(-1,-6))         # Selecting specific columns
x<- x[-1:-2,]
x[2:4] <- lapply(x[2:4],as.integer) # making column specific columns to be integer
x <- x[!apply(is.na(x[,2:4]), 1, all),] # removing NA values from specific columns
return(x)})
listtotake<- df.list[sapply(df.list, ncol)==7]
balance_sheetmigrate<- do.call("rbind", listtotake)
fwrite(balance_sheetmigrate,"outputs/balancesheet.csv",col.names = FALSE)
#Interest Rates
interestrates_df.list<- FUN_metainfo_combine(sheetname = "Sch 2 Interest Rates",skipnumber=9)
df.list <- lapply(interestrates_df.list, function(d) {
d<- d%>%select(c(-1))
d<- d[-1:-2,]
d[2:9] <- lapply(d[2:9],as.numeric) # making column specific columns to be integer
d[3:9]<- d[3:9]*100
#d[14:16]<- d[14:16]*100
return(d)})
interestrates_sheetmigrate<- do.call("rbind", df.list)
fwrite(balance_sheetmigrate,"outputs/interestrate.csv",col.names = FALSE)
pandl_df.list<- FUN_metainfo_combine(sheetname = "Form 2 - Consolidated P&L",skipnumber=9)
df.list <- lapply(pandl_df.list, function(d) {
d<- d%>%select(c(2:5,16:18))
d <- d[-1,]
d[2:4] <- lapply(d[2:4],as.numeric)
return(d)
})
listtotake<- df.list[sapply(df.list, ncol)==13]
PandL_migrate<- do.call("rbind", listtotake)
fwrite(PandL_migrate,"outputs/PandL.csv",col.names = FALSE)
listtotake<- df.list[sapply(df.list, ncol)==13]
View(pandl_df.list)
PandL_migrate<- do.call("rbind", df.list)
fwrite(PandL_migrate,"outputs/PandL.csv",col.names = FALSE)
fxexposure_df.list<- FUN_metainfo_combine(sheetname = "Sch 4 FX Exposure",skipnumber=9)
listtotake<- df.list[sapply(unname(df.list), ncol)==13]
View(df.list)
test <- data.frame(fxexposure_df.list[20])
View(test)
df.list <- lapply(ans_everything, function(d) {
d<- d%>%select(c(-1))
d[2:9] <- lapply(d[2:9],as.numeric)
return(d)
})
test <- data.frame(df.list[20])
View(test)
df.list <- lapply(fxexposure_df.list, function(d) {
d<- d%>%select(c(-1))
d[2:9] <- lapply(d[2:9],as.numeric)
return(d)
})
test <- data.frame(df.list[20])
View(test)
largeborrowers_df.list<- FUN_metainfo_combine(sheetname = "Sch 7 - Large Borrowers",skipnumber=8)
df.list <- lapply(largeborrowers_df.list, function(d) {
d<- d[-1,]
d<- d%>%select(c(-1))
d[2:8] <- lapply(d[2:8],as.numeric) # making column specific columns to be integer
return(d)})
largeborrowers_sheetmigrate<- do.call("rbind", df.list)
fwrite(largeborrowers_sheetmigrate,"outputs/largeborrowers.csv",col.names = FALSE)
largedepositors_df.list<- FUN_metainfo_combine(sheetname = "Sch 6 - Large Depositors",skipnumber=8)
df.list <- lapply(largedepositors_df.list, function(d) {
d<- d[-1,]
d<- d%>%select(c(-1))
d[2:10] <- lapply(d[2:10],as.numeric) # making column specific columns to be integer
return(d)})
largedepositors_sheetmigrate<- do.call("rbind", df.list)
fwrite(largedepositors_sheetmigrate,"outputs/largedepositors.csv",col.names = FALSE)
warnings()
View(largedepositors_df.list)
loansandadvances_df.list<- FUN_metainfo_combine(sheetname = "Schedule 1 Loans & Advance",skipnumber=9)
loansandadvances_df.list<- FUN_metainfo_combine(sheetname = "Schedule 1 Loans & Advance",skipnumber=9)
df.list <- lapply(loansandadvances_df.list, function(d) {
d<- d[-1,]
d<- d%>%select(c(-1))
d[2:14] <- lapply(d[2:14],as.numeric) # making column specific columns to be integer
return(d)})
loansadvances_sheetmigrate<- do.call("rbind", df.list)
fwrite(loansadvances_sheetmigrate,"outputs/loansandadvances.csv",col.names = FALSE)
maturitygap_df.list<- FUN_metainfo_combine(sheetname = "Sch 5 - Maturity GAP",skipnumber=8)
df.list <- lapply(maturitygap_df.list, function(d) {
d<- d%>%select(c(-1))
d[2:11] <- lapply(d[2:11],as.numeric) # making column specific columns to be integer
return(d)})
maturitygap_sheetmigrate<- do.call("rbind", df.list)
fwrite(maturitygap_sheetmigrate,"outputs/maturitygap.csv",col.names = FALSE)
ratesensitivity_df.list<- FUN_metainfo_combine(sheetname = "Sch 8 - Rate Sensitivity",skipnumber=8)
df.list <- lapply(ratesensitivity_df.list, function(d) {
d<- d%>%select(c(-1))
d[2:6] <- lapply(d[2:6],as.numeric) # making column specific columns to be integer
return(d)})
ratesensitivity_sheetmigrate<- do.call("rbind", df.list)
fwrite(ratesensitivity_sheetmigrate,"outputs/ratesensitivity.csv",col.names = FALSE)
relatedparties_df.list<- FUN_metainfo_combine(sheetname = "Sch 3 - Related Parties",skipnumber=9)
df.list <- lapply(ans_everything, function(d) {
d<- d%>%select(c(-1))
d[2:9] <- lapply(d[2:9],as.numeric) # making column specific columns to be integer
return(d)})
relatedparties_sheetmigrate<- do.call("rbind", df.list)
fwrite(relatedparties_sheetmigrate,"outputs/relatedparties.csv",col.names = FALSE)
df.list <- lapply(relatedparties_df.list, function(d) {
d<- d%>%select(c(-1))
d[2:9] <- lapply(d[2:9],as.numeric) # making column specific columns to be integer
return(d)})
relatedparties_sheetmigrate<- do.call("rbind", df.list)
fwrite(relatedparties_sheetmigrate,"outputs/relatedparties.csv",col.names = FALSE)
relatedparties_df.list<- FUN_metainfo_combine(sheetname = "Sch 3 - Related Parties",skipnumber=9)
df.list <- lapply(relatedparties_df.list, function(d) {
d<- d%>%select(c(-1))
d[2:9] <- lapply(d[2:9],as.numeric) # making column specific columns to be integer
return(d)})
relatedparties_sheetmigrate<- do.call("rbind", df.list)
fwrite(relatedparties_sheetmigrate,"outputs/relatedparties.csv",col.names = FALSE)
source('C:/Users/lakna/OneDrive/Desktop/TCinGC/data-base-migration-/all_dataloading_script.R')
filenames <- list.files(here("datafiles"), full.names = TRUE, recursive = TRUE)
# Extracting out parameters/meta data from the files names to be later added into the datasets
sites <- str_extract(filenames[23:139], "BP|PIB|PCB|APCB|BOH|BOG")  # same length as filenames
years <- str_extract(filenames[23:139], "\\d{4}")  # extracting the years from the files
quarters <- str_extract(filenames[23:139], "\\d{1}+(?= Prudential|_)")  # extracting the quarter from the files
test<- cbind(sites,years,quarters)
View(test)
test%>%group_by(sites)%>%summarize()
test%>%group_by(sites)%>%summarize(years,quarters)
test%>%group_by(sites)%>%summarize(n=n())
test%>%group_by(sites)
test<- cbind(sites,years,quarters)
test%>%group_by(sites)
test<- cbind(c(sites,years,quarters))
test<- data.frame(sites,years,quarters)
test%>%group_by(sites)
test%>%group_by(sites)%>%summarize()
test%>%group_by(sites)%>%summarize(years)
year_summary%>%group_by(sites)%>%summarize(years)
year_summary <- test%>%group_by(sites)%>%summarize(years)
View(year_summary)
year_summary <- test%>%group_by(sites)%>%summarize(years,quarter)
year_summary <- test%>%group_by(sites)%>%summarize(n=n())
View(year_summary)
year_summary <- test%>%group_by(sites)%>%summarize(years)
View(year_summary)
year_summary <- test%>%group_by(sites)%>%summarize(n=n(years))
year_summary <- test%>%group_by(sites)%>%summarize(n=count(years))
year_summary <- test%>%group_by(sites)%>%summarize(years)
View(year_summary)
year_summary <- test%>%group_by(sites)%>%count(years)
View(year_summary)
source("library.r")
#-------------Reading Prudential Return Form Files--------------------------------------------
# The following reads the Balance sheet sheet each of the files saved in the datafiles folder
# Only files post 2014 were able to be uploaded
excelfiles<- dir_ls("datafiles")[23:139]%>% # files 1 through 23 have certain issues which prevent them being read
map(read_excel,sheet="Sch 4 FX Exposure",skip = 9)
test<- data.frame(excelfiles[2])
filenames <- list.files(here("datafiles"), full.names = TRUE, recursive = TRUE)
# Extracting out parameters from the files names to be later added into the datasets
sites <- str_extract(filenames[23:139], "BP|PIB|PCB|APCB|BOH|BOG")  # same length as filenames
years <- str_extract(filenames[23:139], "\\d{4}")  # extracting the years from the files
quarters <- str_extract(filenames[23:139], "\\d{1}+(?= Prudential|_)")  # extracting the quarter from the files
stopifnot(length(filenames[23:139])==length(sites))  # returns error if not the same length
ans <- map2(filenames[23:139], sites, ~read_excel(.x,sheet="Sch 4 FX Exposure",skip=9) %>% mutate(id = .y))  # .x is element in filenames, and .y is element in sites
#adding year as a column
ans_withyear<- Map(cbind, ans, year = years)
#Adding the quarter as a column
ans_everything<- Map(cbind, ans_withyear, quarter = quarters)
source("library.r")
#-------------Reading Prudential Return Form Files--------------------------------------------
# The following reads the Balance sheet sheet each of the files saved in the datafiles folder
# Only files post 2014 were able to be uploaded
excelfiles<- dir_ls("datafiles")[23:139]%>% # files 1 through 23 have certain issues which prevent them being read
map(read_excel,sheet="Sch 4 FX Exposure",skip = 9)
test<- data.frame(excelfiles[2])
filenames <- list.files(here("datafiles"), full.names = TRUE, recursive = TRUE)
# Extracting out parameters from the files names to be later added into the datasets
sites <- str_extract(filenames[23:139], "BP|PIB|PCB|APCB|BOH|BOG")  # same length as filenames
years <- str_extract(filenames[23:139], "\\d{4}")  # extracting the years from the files
quarters <- str_extract(filenames[23:139], "\\d{1}+(?= Prudential|_)")  # extracting the quarter from the files
stopifnot(length(filenames[23:139])==length(sites))  # returns error if not the same length
ans <- map2(filenames[23:139], sites, ~read_excel(.x,sheet="Sch 4 FX Exposure",skip=9) %>% mutate(id = .y))  # .x is element in filenames, and .y is element in sites
#adding year as a column
ans_withyear<- Map(cbind, ans, year = years)
#Adding the quarter as a column
ans_everything<- Map(cbind, ans_withyear, quarter = quarters)
#-------------Reading Prudential Return Form Files--------------------------------------------
# The following reads the Balance sheet sheet each of the files saved in the datafiles folder
# Only files post 2014 were able to be uploaded
excelfiles<- dir_ls("datafiles")[23:139]%>% # files 1 through 23 have certain issues which prevent them being read
map(read_excel,sheet="Sch 4 FX Exposure",skip = 9)
test<- data.frame(excelfiles[2])
filenames <- list.files(here("datafiles"), full.names = TRUE, recursive = TRUE)
# Extracting out parameters from the files names to be later added into the datasets
sites <- str_extract(filenames[23:139], "BP|PIB|PCB|APCB|BOH|BOG")  # same length as filenames
years <- str_extract(filenames[23:139], "\\d{4}")  # extracting the years from the files
quarters <- str_extract(filenames[23:139], "\\d{1}+(?= Prudential|_)")  # extracting the quarter from the files
stopifnot(length(filenames[23:139])==length(sites))  # returns error if not the same length
ans <- map2(filenames[23:139], sites, ~read_excel(.x,sheet="Sch 4 FX Exposure",skip=9) %>% mutate(id = .y))  # .x is element in filenames, and .y is element in sites
#adding year as a column
ans_withyear<- Map(cbind, ans, year = years)
#Adding the quarter as a column
ans_everything<- Map(cbind, ans_withyear, quarter = quarters)
getwd()
ans <- map2(filenames[23:139], sites, ~read_excel(.x,sheet="Sch 4 FX Exposure",skip=9) %>% mutate(id = .y))  # .x is element in filenames, and .y is element in sites
source('C:/Users/lakna/OneDrive/Desktop/TCinGC/data-base-migration-/all_dataloading_script.R')
#function for combining file meta data information with file created
FUN_metainfo_combine <- function(fileskip=23:139,sheetname,skipnumber){
stopifnot(length(filenames[fileskip])==length(sites))  # returns error if not the same length
ans <- map2(filenames[fileskip], sites, ~read_excel(.x,sheetname,skip=skipnumber) %>% mutate(id = .y))  # .x is element in filenames, and .y is element in sites
#adding year as a column
ans_withyear<- Map(cbind, ans, year = years)
#Adding the quarter as a column
ans_everything<- Map(cbind, ans_withyear, quarter = quarters)
return(ans_everything)
}
#----------------------------
#Loading the library's
source("library.R")
filenames <- list.files(here("datafiles"), full.names = TRUE, recursive = TRUE)
# Extracting out parameters/meta data from the files names to be later added into the datasets
sites <- str_extract(filenames[23:139], "BP|PIB|PCB|APCB|BOH|BOG")  # same length as filenames
years <- str_extract(filenames[23:139], "\\d{4}")  # extracting the years from the files
quarters <- str_extract(filenames[23:139], "\\d{1}+(?= Prudential|_)")  # extracting the quarter from the files
bs_df.list<- FUN_metainfo_combine(sheetname = "Form 1 Bal Sheet",skipnumber=8)
#Cleaning up each excel file by removing columns,using row names as columns, changing column datatypes
df.list <- lapply(bs_df.list, function(x) {
x <- x%>%select(c(-1,-6))         # Selecting specific columns
x<- x[-1:-2,]
x[2:4] <- lapply(x[2:4],as.integer) # making column specific columns to be integer
x <- x[!apply(is.na(x[,2:4]), 1, all),] # removing NA values from specific columns
return(x)})
listtotake<- df.list[sapply(df.list, ncol)==7]
balance_sheetmigrate<- do.call("rbind", listtotake)
fwrite(balance_sheetmigrate,"outputs/balancesheet.csv",col.names = FALSE)
bs_df.list<- FUN_metainfo_combine(sheetname = "Form 1 Bal Sheet",skipnumber=8)
#Loading the library's
source("library.R")
filenames <- list.files(here("datafiles"), full.names = TRUE, recursive = TRUE)
# Extracting out parameters/meta data from the files names to be later added into the datasets
sites <- str_extract(filenames[23:139], "BP|PIB|PCB|APCB|BOH|BOG")  # same length as filenames
years <- str_extract(filenames[23:139], "\\d{4}")  # extracting the years from the files
quarters <- str_extract(filenames[23:139], "\\d{1}+(?= Prudential|_)")  # extracting the quarter from the files
bs_df.list<- FUN_metainfo_combine(sheetname = "Form 1 Bal Sheet",skipnumber=8)
#Cleaning up each excel file by removing columns,using row names as columns, changing column datatypes
df.list <- lapply(bs_df.list, function(x) {
x <- x%>%select(c(-1,-6))         # Selecting specific columns
x<- x[-1:-2,]
x[2:4] <- lapply(x[2:4],as.integer) # making column specific columns to be integer
x <- x[!apply(is.na(x[,2:4]), 1, all),] # removing NA values from specific columns
return(x)})
bs_df.list<- FUN_metainfo_combine(sheetname = "Form 1 Bal Sheet",skipnumber=8)
getwd()
filenames <- list.files(here("datafiles"), full.names = TRUE, recursive = TRUE)
filenames
sites <- str_extract(filenames[23:139], "BP|PIB|PCB|APCB|BOH|BOG")  # same length as filenames
years <- str_extract(filenames[23:139], "\\d{4}")  # extracting the years from the files
quarters <- str_extract(filenames[23:139], "\\d{1}+(?= Prudential|_)")  # extracting the quarter from the files
quarters
#function for combining file meta data information with file created
FUN_metainfo_combine <- function(fileskip=23:139,sheetname,skipnumber){
stopifnot(length(filenames[fileskip])==length(sites))  # returns error if not the same length
ans <- map2(filenames[fileskip], sites, ~read_excel(.x,sheetname,skip=skipnumber) %>% mutate(id = .y))  # .x is element in filenames, and .y is element in sites
#adding year as a column
ans_withyear<- Map(cbind, ans, year = years)
#Adding the quarter as a column
ans_everything<- Map(cbind, ans_withyear, quarter = quarters)
return(ans_everything)
bs_df.list<- FUN_metainfo_combine(sheetname = "Form 1 Bal Sheet",skipnumber=8)
#function for combining file meta data information with file created
FUN_metainfo_combine <- function(fileskip=23:139,sheetname,skipnumber){
stopifnot(length(filenames[fileskip])==length(sites))  # returns error if not the same length
ans <- map2(filenames[fileskip], sites, ~read_excel(.x,sheetname,skip=skipnumber) %>% mutate(id = .y))  # .x is element in filenames, and .y is element in sites
#adding year as a column
ans_withyear<- Map(cbind, ans, year = years)
#Adding the quarter as a column
ans_everything<- Map(cbind, ans_withyear, quarter = quarters)
return(ans_everything)
}
bs_df.list<- FUN_metainfo_combine(sheetname = "Form 1 Bal Sheet",skipnumber=8)
interestrates_df.list<- FUN_metainfo_combine(sheetname = "Sch 2 Interest Rates",skipnumber=9)
#Loading the library's
source("library.R")
filenames <- list.files(here("datafiles"), full.names = TRUE, recursive = TRUE)
sites <- str_extract(filenames[23:139], "BP|PIB|PCB|APCB|BOH|BOG")  # same length as filenames
years <- str_extract(filenames[23:139], "\\d{4}")  # extracting the years from the files
quarters <- str_extract(filenames[23:139], "\\d{1}+(?= Prudential|_)")  # extracting the quarter from the files
quarters
FUN_metainfo_combine <- function(fileskip=23:139,sheetname,skipnumber){
stopifnot(length(filenames[fileskip])==length(sites))  # returns error if not the same length
ans <- map2(filenames[fileskip], sites, ~read_excel(.x,sheetname,skip=skipnumber) %>% mutate(id = .y))  # .x is element in filenames, and .y is element in sites
#adding year as a column
ans_withyear<- Map(cbind, ans, year = years)
#Adding the quarter as a column
ans_everything<- Map(cbind, ans_withyear, quarter = quarters)
return(ans_everything)
}
bs_df.list<- FUN_metainfo_combine(sheetname = "Form 1 Bal Sheet",skipnumber=8)
getwd()
filenames
filenames[5]
filenames[24]
read_excel(filenames[24])
read_excel(filenames[24],"Form 1 Bal Sheet")
read_excel(filenames[139],"Form 1 Bal Sheet")
read_excel(filenames[138],"Form 1 Bal Sheet")
filenames[138]
filenames[139]
filenames[23:]
filenames[23::]
filenames[23:]
len(filenames)
length(filenames)
filenames[23:length(filenames)]
FUN_metainfo_combine <- function(fileskip=filenames[23:length(filenames)],sheetname,skipnumber){
stopifnot(length(filenames[fileskip])==length(sites))  # returns error if not the same length
ans <- map2(filenames[fileskip], sites, ~read_excel(.x,sheetname,skip=skipnumber) %>% mutate(id = .y))  # .x is element in filenames, and .y is element in sites
#adding year as a column
ans_withyear<- Map(cbind, ans, year = years)
#Adding the quarter as a column
ans_everything<- Map(cbind, ans_withyear, quarter = quarters)
return(ans_everything)
}
bs_df.list<- FUN_metainfo_combine(sheetname = "Form 1 Bal Sheet",skipnumber=8)
filenames <- list.files(here("datafiles"), full.names = TRUE, recursive = TRUE)
# Extracting out parameters/meta data from the files names to be later added into the datasets
sites <- str_extract(filenames[23:length(filenames)], "BP|PIB|PCB|APCB|BOH|BOG")  # same length as filenames
years <- str_extract(filenames[23:length(filenames)], "\\d{4}")  # extracting the years from the files
quarters <- str_extract(filenames[23:length(filenames)], "\\d{1}+(?= Prudential|_)")  # extracting the quarter from the files
#function for combining file meta data information with file created
FUN_metainfo_combine <- function(fileskip=filenames[23:length(filenames)],sheetname,skipnumber){
stopifnot(length(filenames[fileskip])==length(sites))  # returns error if not the same length
ans <- map2(filenames[fileskip], sites, ~read_excel(.x,sheetname,skip=skipnumber) %>% mutate(id = .y))  # .x is element in filenames, and .y is element in sites
#adding year as a column
ans_withyear<- Map(cbind, ans, year = years)
#Adding the quarter as a column
ans_everything<- Map(cbind, ans_withyear, quarter = quarters)
return(ans_everything)
}
bs_df.list<- FUN_metainfo_combine(sheetname = "Form 1 Bal Sheet",skipnumber=8)
sites
years
quarters
length(sites)
length(years)
length(quarters)
fileskip=filenames[23:length(filenames)]
fileskip
length(filenames[fileskip])==length(sites)
fileskip
#function for combining file meta data information with file created
FUN_metainfo_combine <- function(fileskip=filenames[23:length(filenames)],sheetname,skipnumber){
stopifnot(length(filenames[fileskip])==length(sites))  # returns error if not the same length
ans <- map2(filenames[fileskip], sites, ~read_excel(.x,sheetname,skip=skipnumber) %>% mutate(id = .y))  # .x is element in filenames, and .y is element in sites
#adding year as a column
ans_withyear<- Map(cbind, ans, year = years)
#Adding the quarter as a column
ans_everything<- Map(cbind, ans_withyear, quarter = quarters)
return(ans_everything)
}
bs_df.list<- FUN_metainfo_combine(sheetname = "Form 1 Bal Sheet",skipnumber=8)
#Loading the library's
source("library.R")
filenames <- list.files(here("datafiles"), full.names = TRUE, recursive = TRUE)
# Extracting out parameters/meta data from the files names to be later added into the datasets
sites <- str_extract(filenames[23:length(filenames)], "BP|PIB|PCB|APCB|BOH|BOG")  # same length as filenames
years <- str_extract(filenames[23:length(filenames)], "\\d{4}")  # extracting the years from the files
quarters <- str_extract(filenames[23:length(filenames)], "\\d{1}+(?= Prudential|_)")  # extracting the quarter from the files
#function for combining file meta data information with file created
FUN_metainfo_combine <- function(fileskip=filenames[23:length(filenames)],sheetname,skipnumber){
stopifnot(length(filenames[fileskip])==length(sites))  # returns error if not the same length
ans <- map2(filenames[fileskip], sites, ~read_excel(.x,sheetname,skip=skipnumber) %>% mutate(id = .y))  # .x is element in filenames, and .y is element in sites
#adding year as a column
ans_withyear<- Map(cbind, ans, year = years)
#Adding the quarter as a column
ans_everything<- Map(cbind, ans_withyear, quarter = quarters)
return(ans_everything)
}
#-----------------------------------Balance Sheet---------------------S-------------------------
bs_df.list<- FUN_metainfo_combine(sheetname = "Form 1 Bal Sheet",skipnumber=8)
FUN_metainfo_combine <- function(fileskip=filenames[23:length(filenames)],sheetname,skipnumber){
stopifnot(length(filenames[fileskip])==length(sites))  # returns error if not the same length
ans <- map2(filenames[fileskip], sites, ~read_excel(.x,sheetname,skip=skipnumber) %>% mutate(id = .y))  # .x is element in filenames, and .y is element in sites
#adding year as a column
ans_withyear<- Map(cbind, ans, year = years)
#Adding the quarter as a column
ans_everything<- Map(cbind, ans_withyear, quarter = quarters)
return(ans_everything)
}
FUN_metainfo_combine(sheetname = "Form 1 Bal Sheet",skipnumber=8)
bs_df.list<- FUN_metainfo_combine(fileskip=filenames[23:length(filenames)],sheetname = "Form 1 Bal Sheet",skipnumber=8)
FUN_metainfo_combine(fileskip=filenames[23:length(filenames)],
sheetname = "Form 1 Bal Sheet",skipnumber=8)
#------------------------------Data Migration Script--------------------------
# Loading Required Packages
# The packages are located in the script called library.r
# If any of the packages are not installed in your local machine
# nstall.packages(package name) e.g
#install.packages("tidyverse")
source("library.r")
#-------------Reading Prudential Return Form Files--------------------------------------------
# The following reads the Balance sheet sheet each of the files saved in the datafiles folder
# Only files post 2014 were able to be uploaded
excelfiles<- dir_ls("datafiles")[23:139]%>% # files 1 through 23 have certain issues which prevent them being read
map(read_excel,sheet="Form 1 Bal Sheet",skip = 8)
setwd("datafiles")
getwd()
excelfiles<- dir_ls("datafiles")[23:139]%>% # files 1 through 23 have certain issues which prevent them being read
map(read_excel,sheet="Form 1 Bal Sheet",skip = 8)
dir_ls("datafiles")
getwd()
